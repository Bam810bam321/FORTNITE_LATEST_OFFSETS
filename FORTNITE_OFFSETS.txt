#pragma once
#include <Windows.h>

#define OFFSET_UWORLD 0xe9ea3f8 //

namespace OFFSETS
{
    uintptr_t Gameinstance = 0x1b8; //
    uintptr_t LocalPlayers = 0x38;
    uintptr_t PlayerController = 0x30;
    uintptr_t LocalPawn = 0x328; //
    uintptr_t PlayerState = 0x2a8; //
    uintptr_t RootComponet = 0x190; //
    uintptr_t PersistentLevel = 0x30;
    uintptr_t ActorCount = 0xA0;    
    uintptr_t AActor = 0x98;
    uintptr_t CurrentActor = 0x8;
    uintptr_t TeamIndex = 0x10e8;
    uintptr_t Mesh = 0x310;
    uintptr_t Revivefromdbnotime = 0x4388; //
    uintptr_t TeamId = 0x6a1;
    uintptr_t LocalActorPos = 0x128;
    uintptr_t ComponetToWorld = 0x240;
    uintptr_t BoneArray = 0x5a0;
    uintptr_t Velocity = 0xb8;
    uintptr_t PawnPrivate = 0x300;
    uintptr_t PlayerArray = 0x2a0;

    uintptr_t ReviveFromDBNOTime = 0x4388;

}


namespace W2S {
    uintptr_t chain69 = 0xA8;
    uintptr_t chain699 = 0x7E8;
    uintptr_t chain = 0x70;
    uintptr_t chain1 = 0x98;
    uintptr_t chain2 = 0x140;   
    uintptr_t vDelta = 0x10;
    uintptr_t zoom = 0x580;
}






Camera GetCamera(__int64 a1)
{
    Camera FGC_Camera;
    __int64 v1;
    __int64 v6;
    __int64 v7;
    __int64 v8;

    v1 = readvm<__int64>(Localplayer + 0xd0);
    __int64 v9 = readvm<__int64>(v1 + 0x8); // 0x10

    FGC_Camera.FieldOfView = 80.0f / (readvm<double>(v9 + 0x620) / 1.19f); // 0x680

    FGC_Camera.Rotation.x = readvm<double>(v9 + 0x870);
    FGC_Camera.Rotation.y = readvm<double>(a1 + 0x148);

    uint64_t FGC_Pointerloc = readvm<uint64_t>(Uworld + 0x110);
    FGC_Camera.Location = readvm<Vector3>(FGC_Pointerloc);

    return FGC_Camera;
}